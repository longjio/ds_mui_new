2025.06.10
라우터 문제인지 일주일을 헤매고 GPT와 씨름해도 프로젝트 화면이 렌더링되지 않아서 결국 작업 중단.
MUI 프로젝트 처음부터 다시 시작해보자!
1. Node.js 버전이 혹시 문제될지 몰라 작업 전 업데이트 하기
(잠재적 호환성 문제)
기존 Node.js 삭제
nvm-setup.exe 파일 다운로드 및 설치


2025.06.11
1. npm install
2. npm start
3. npm install react-router-dom
4. 각 폴더 생성 (components, layouts, pages)
5. mui스타일은 Emotion 라이브러리를 사용하므로 패키지 설치
npm install @mui/material @emotion/react @emotion/styled
6. 폰트 설치
npm install pretendard
7. MUI X DataGrid
   npm install @mui/x-data-grid



2025.06.17
버튼의 그림자 효과 제거할 때 disableElevation 넣기
<DsButtonGroup
    {...commonGroupProps}
    variant="contained"
    disableElevation // true로 설정된 것과 동일
    aria-label="Contained button group with elevation disabled"
>

2025.06.20
화면 배포
npm run build
npm install --save-dev gh-pages --legacy-peer-deps
npm run deploy

2025.06.22
git clone이나 다운로드 등으로 프로젝트를 불러와도
src폴더 포함 프로젝트 파일들이 안보여 이틀 내내 AI와 씨름했다.
File - Project Structure - Modules 에서 프로젝트 폴더를 불러오고 해결

2025.06.23
npm install @mui/x-date-pickers
npm install dayjs

2025.06.24
mdi tab 기능 구현

2025.06.25
좌측 메뉴 스크롤 잘리는 문제 해결


IntelliJ의 강력한 캐시 초기화 기능 사용:
•IntelliJ는 단순 재시작보다 더 강력한 캐시 무효화 및 재시작 기능이 있습니다.
이게 때로는 꼬인 인덱스나 캐시 문제를 해결해 줄 수 있어요.
•방법: IntelliJ 메뉴에서 File > Invalidate Caches / Restart...를 선택하세요.
•나타나는 대화상자에서 Invalidate and Restart 버튼을 클릭합니다.
(옵션 중 Clear file system cache and Local History 등도 선택해볼 수 있지만,
일단 기본 Invalidate and Restart부터 시도해 보세요.)•이 작업은 시간이 조금 걸릴 수 있습니다.
IntelliJ가 프로젝트 인덱싱을 처음부터 다시 진행합니다.


일반 Button vs Toggle Button
(일반 Button: 어떤 동작(Action)을 실행하기 위해 사용해요. 클릭하면 특정 기능이 수행되고, 버튼 자체의 상태는 클릭 후 원래대로 돌아옴. "저장", "삭제", "제출", "닫기" 등과 같이 즉각적인 행동을 유발할 때 사용. 클릭 한 번으로 특정 작업이 완료되거나 시작.
여러 버튼을 나란히 배치할 수는 있지만, 버튼 간의 선택 상태가 서로 영향을 주지는 않음.
ToggleButton: 어떤 상태(State)를 켜거나 끄거나, 여러 옵션 중 하나를 선택하기 위해 사용. 클릭하면 버튼의 선택 상태가 유지되면서 시각적으로도 선택되었음을 보여줌.
설정 변경, 필터 적용, 보기 모드 전환 (예: 목록 보기/그리드 보기), 텍스트 스타일 적용 (예: 굵게/기울임꼴) 등과 같이 UI의 상태나 설정을 변경할 때 사용
selected prop이 true이면 버튼이 선택된 상태로 보이고, false이면 선택되지 않은 상태로 보임.


다크테마 구현
import * as React from 'react';
import { ThemeProvider, createTheme } from '@mui/material/styles';

const darkTheme = createTheme({
  palette: {
    mode: 'dark',
  },
});

export function App() {
  return (
    <ThemeProvider theme={darkTheme}>
      {/* 여기에 기존 컴포넌트들 */}
    </ThemeProvider>
  );
}

다크/라이트 전환
import React, { useState } from 'react';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import { Button } from '@mui/material';

export function App() {
  const [isDarkMode, setIsDarkMode] = useState(false);

  const theme = createTheme({
    palette: {
      mode: isDarkMode ? 'dark' : 'light',
    },
  });

  return (
    <ThemeProvider theme={theme}>
      <div style={{ padding: '20px' }}>
        <Button variant="contained" onClick={() => setIsDarkMode(!isDarkMode)}>
          {isDarkMode ? '라이트 모드로 전환' : '다크 모드로 전환'}
        </Button>
      </div>
    </ThemeProvider>
  );